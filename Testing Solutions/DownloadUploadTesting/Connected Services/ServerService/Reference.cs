//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DownloadUploadTesting.ServerService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerService.IServerService")]
    public interface IServerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetHandler", ReplyAction="http://tempuri.org/IClientService/GetHandlerResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.MarshalByRefObject))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.FileStream))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.IO.Stream))]
        object GetHandler();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/GetHandler", ReplyAction="http://tempuri.org/IClientService/GetHandlerResponse")]
        System.Threading.Tasks.Task<object> GetHandlerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DownloadFile", ReplyAction="http://tempuri.org/IClientService/DownloadFileResponse")]
        System.IO.Stream DownloadFile(string fileNameAndExtension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IClientService/DownloadFile", ReplyAction="http://tempuri.org/IClientService/DownloadFileResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string fileNameAndExtension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/UploadFile", ReplyAction="http://tempuri.org/IServerService/UploadFileResponse")]
        bool UploadFile(System.IO.FileStream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/UploadFile", ReplyAction="http://tempuri.org/IServerService/UploadFileResponse")]
        System.Threading.Tasks.Task<bool> UploadFileAsync(System.IO.FileStream stream);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/SetNextFileName", ReplyAction="http://tempuri.org/IServerService/SetNextFileNameResponse")]
        void SetNextFileName(string name, bool @override);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/SetNextFileName", ReplyAction="http://tempuri.org/IServerService/SetNextFileNameResponse")]
        System.Threading.Tasks.Task SetNextFileNameAsync(string name, bool @override);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerServiceChannel : DownloadUploadTesting.ServerService.IServerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerServiceClient : System.ServiceModel.ClientBase<DownloadUploadTesting.ServerService.IServerService>, DownloadUploadTesting.ServerService.IServerService {
        
        public ServerServiceClient() {
        }
        
        public ServerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public object GetHandler() {
            return base.Channel.GetHandler();
        }
        
        public System.Threading.Tasks.Task<object> GetHandlerAsync() {
            return base.Channel.GetHandlerAsync();
        }
        
        public System.IO.Stream DownloadFile(string fileNameAndExtension) {
            return base.Channel.DownloadFile(fileNameAndExtension);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadFileAsync(string fileNameAndExtension) {
            return base.Channel.DownloadFileAsync(fileNameAndExtension);
        }
        
        public bool UploadFile(System.IO.FileStream stream) {
            return base.Channel.UploadFile(stream);
        }
        
        public System.Threading.Tasks.Task<bool> UploadFileAsync(System.IO.FileStream stream) {
            return base.Channel.UploadFileAsync(stream);
        }
        
        public void SetNextFileName(string name, bool @override) {
            base.Channel.SetNextFileName(name, @override);
        }
        
        public System.Threading.Tasks.Task SetNextFileNameAsync(string name, bool @override) {
            return base.Channel.SetNextFileNameAsync(name, @override);
        }
    }
}
